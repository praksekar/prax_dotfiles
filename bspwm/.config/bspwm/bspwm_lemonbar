#!/bin/bash

# kill running instance of lemonbar and bspwm_lemonbar, launch lemonbar with modules
pgrep -x lemonbar > /dev/null && pkill -x lemonbar
script_name=${BASH_SOURCE[0]}
for pid in $(pidof -x $script_name); do
    if [ $pid != $$ ]; then
        kill -9 $pid
    fi 
done

# get number of monitors, display on each monitor

clock() {
    while true; do
        clock=$(date "+%I:%M")
        echo "T$clock"
        sleep 1s
    done
}

cal() {
    while true; do
        caldate=$(date "+%a, %d %B %Y")
        echo "D$caldate"
        sleep 60s
    done
}

workspace() {
    bspc subscribe desktop_focus | while read; do
        workspace=$(bspc query -D -d focused --names)
        echo "W$workspace"
    done
}

memory() {
    while true; do
        memory="$(free | grep Mem | awk '{print $3/$2 * 100.0}')"
        memory=${memory%%.*} # only keep numbers before decimal
        echo "MMemory: $memory%"
        sleep 3s
    done
}

cpu() {
    while true; do
        cpu="$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) "%"; }' <(grep 'cpu ' /proc/stat) <(sleep 3;grep 'cpu ' /proc/stat))"
        cpu=${cpu%%.*} # only keep numbers before decimal
        echo "CCPU: $cpu%"
    done
}

battery() {
    while true; do
        BATTACPI=$(acpi --battery)
        output=$(echo $BATTACPI | cut -d, -f2 | tr -d '[:space:]')
        echo "BBattery: $output%"
        sleep 60s
    done  
}

# alternative to bspc subscribe is: xprop -spy -root _NET_ACTIVE_WINDOW
activewindow_event() {
    bspc subscribe node_focus desktop_focus | while read; do
        len=$(echo -n "$(xdotool getwindowfocus getwindowname)" | wc -m)
        max_len=70
        if [ "$len" -gt "$max_len" ];then
            windowname="$(xdotool getwindowfocus getwindowname | cut -c 1-$max_len)..."
        else
            windowname="$(xdotool getwindowfocus getwindowname)"
        fi
        echo -e "A$windowname" 
    done 
}

activewindow_poll() {
    while true; do
        len=$(echo -n "$(xdotool getwindowfocus getwindowname)" | wc -m)
        max_len=70
        if [ "$len" -gt "$max_len" ];then
            windowname="$(xdotool getwindowfocus getwindowname | cut -c 1-$max_len)..."
        else
            windowname="$(xdotool getwindowfocus getwindowname)"
        fi
        echo -e "A$windowname" 
        sleep 1s
    done 
}

wifi() {
    while true; do
        WIFISTR=$( iwconfig wlp0s20f3 | grep "Link" | sed 's/ //g' | sed 's/LinkQuality=//g' | sed 's/\/.*//g')
        if [ ! -z $WIFISTR ] ; then
            WIFISTR=$(( ${WIFISTR} * 100 / 70))
            ESSID=$(iwconfig wlp0s20f3 | grep ESSID | sed 's/ //g' | sed 's/.*://' | cut -d "\"" -f 2)
            if [ $WIFISTR -ge 1 ] ; then
                wifi_name="$ESSID $WIFISTR%"
            fi
        fi
        echo "I$wifi_name"
        sleep 10s
    done
}

volume() {
    pactl subscribe | while read; do
        volume=$(awk -F"[][]" '/dB/ { print $2 }' <(amixer sget Master))
        echo "VVolume: $volume"
    done
}

output_stream() {
    activewindow_event &
    activewindow_poll &
    workspace &
    battery &
    clock &
    volume &
    cal &
    wifi &
    memory &
    cpu &
    wait
}

#two_monitors=false
#if [ "$(xrandr | grep -w connected | wc -l)" -eq "2" ]
#then
    #two_monitors=true
#fi

output_stream | while read line; do
    case $line in 
        T*) clock="${line:1}" ;;
        C*) cpu="${line:1}" ;;
        W*) workspace="${line:1}" ;;
        B*) battery="${line:1}" ;;
        A*) activewindow="${line:1}" ;;
        I*) wifi="${line:1}" ;;
        V*) volume="${line:1}" ;;
        D*) date="${line:1}" ;;
        M*) memory="${line:1}" ;;
    esac

	echo -e "%{l}$workspace" "%{c}$activewindow" "%{r}  $memory $cpu $wifi  $volume  $date $clock $battery"
    #if [ $two_monitors ] 
    #then 
        #echo -e "%{S1}%{l}$workspace" "%{c}$activewindow" "%{r}  $memory $cpu $wifi  $volume  $date $clock $battery"
    #fi

done | lemonbar  -p -F 4287f5


