#!/bin/bash

get_total_connected_monitors_arr() {
    local monitors_remaining=""
    while read monitor_name; do
        monitors_remaining+="$monitor_name "
    done < <(xrandr | grep -w connected | awk '{print $1}') 
    echo "$monitors_remaining"
}

convert_arr_to_dmenu_string() {
    local monitors_remaining="$1"
    echo "$(echo "$monitors_remaining" | tr " " "\n" )"
}

choose_starting_monitor() { 
    local dmenu_monitors_remaining_string="$1"
    starting_monitor=$(echo -e "$dmenu_monitors_remaining_string" | dmenu -i -p "choose starting point (default: primary)")
    echo $starting_monitor
}


connect_monitors() {
    # initialize variables
    total_connected_monitors_arr="$(get_total_connected_monitors_arr)"
    monitors_remaining_arr="$total_connected_monitors_arr"
    num_monitors=$(echo "$total_connected_monitors_arr" | wc -w)
    num_external_monitors="$(echo $num_monitors-1 | bc)"
    dmenu_monitors_remaining_string=$(convert_arr_to_dmenu_string "$total_connected_monitors_arr")
    last_connected_monitor="$(choose_starting_monitor "$dmenu_monitors_remaining_string")" # set last_connected_monitor to the choice of starting monitor so this disappears on the monitor selection

    count=0

    while [ "$count" -lt "$num_external_monitors" ]; do
        monitors_remaining_arr="${monitors_remaining_arr//$last_connected_monitor/}"
        dmenu_monitors_remaining_string="$(convert_arr_to_dmenu_string "$monitors_remaining_arr")"

        selected_dir=$(echo -e "--right-of\n--left-of\n--above\n--below\n--same-as" | dmenu -i -p "which direction is this monitor relative to the last monitor connected?" -i)
        selected_monitor=$(echo -e "$dmenu_monitors_remaining_string" | dmenu -i -p "now, which monitor to connect in this direction?" -i)

        notify-send "xrandr --output $selected_monitor $selected_dir $last_connected_monitor"
        xrandr --auto
        xrandr --output $selected_monitor $selected_dir $last_connected_monitor || notify-send "command failed!"
        last_connected_monitor=$selected_monitor

        ((count++))
    done
}

disconnect_monitors() {
     notify-send "disconnecting monitors..."
     while read monitor; do
        #[ "$monitor" == "$MONITOR_PRIMARY" ] && continue
        bspc desktop -a placeholder
        while read desktop; do
            [ "$desktop" != "placeholder" ] && bspc desktop "$desktop" -m "$MONITOR_PRIMARY"
        done < <(bspc query -D -m $monitor) 
        bspc desktop placeholder -r 
        if [ -z "$(bspc query -D -m $monitor --names)" ]; then 
            bspc monitor "$monitor" -r
        fi
        sleep 0.5
        xrandr --output "$monitor" --off
    done < <(bspc query -M --names) 
}

case "$1" in
    --connect-monitors) connect_monitors ;;
    --disconnect-monitors) disconnect_monitors ;;
    *) echo "invalid argument"; exit 1 ;;
esac

bspc wm -r
setxkbmap -option caps:swapescape


