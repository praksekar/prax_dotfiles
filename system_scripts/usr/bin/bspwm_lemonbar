#!/bin/bash

# kill running instance of lemonbar and bspwm_lemonbar, launch lemonbar with modules
kill_running_instance() {
    pgrep -x lemonbar > /dev/null && pkill -x lemonbar
    script_name=${BASH_SOURCE[0]}
    for pid in $(pidof -x $script_name); do
        if [ $pid != $$ ]; then
            kill -9 $pid
        fi 
    done
}

get_element_by_index() {
    spaced_string="$1"
    index="$2"
    arr=($spaced_string)
    dashed_string="${arr[$index]}"
    echo "$(echo $dashed_string | tr "." " ")"
}

# values across all monitors are simply stored as variables; monitor specific values are stored as a space delimited string

brightnesses() {
    local label="S"
    local brightnesses=""
    while read monitor_name; do
        if [ $monitor_name == $primary_monitor ]; then
            brightnesses="$brightnesses $(bspwm_chbr --get-laptop-brightness)"
        else
            brightnesses="$brightnesses $(bspwm_chbr --get-monitor-brightness $monitor_name)"
        fi
    done < <(bspc query -M --names)
    echo "$label$brightnesses"
}

clock() {
    local label="T"
    local clock=$(date "+%I:%M")
    echo "$label$clock"
}

cal() {
    local label="D"
    local caldate=$(date "+%a, %d %B %Y")
    echo "$label$caldate"
}

workspace_old() {
    local label="W"
    local workspace="$(workspace_module)"
    echo "$label$workspace"
}

workspace() {
    local label="W"
    local underline_opener="%{+uU#f090d6}"
    local underline_closer="%{-u}"
    #echo focused_desktop:$focused_desktop
    workspaces_string=""
    while read monitor_name; do
        active_desktop="$(bspc query -D -m $monitor_name -d .active --names)"
         while read desktop_name; do
            if [ "$desktop_name" == "$active_desktop" ]; then 
                desktop_name="$underline_opener$desktop_name$underline_closer"
            fi
            workspaces_string="$workspaces_string$desktop_name."
        done < <(bspc query -D -m $monitor_name --names | sort -g)
        workspaces_string="$workspaces_string "
    done < <(bspc query -M --names) 
    echo -e "$label$workspaces_string"
}

#grep -x '[0-9][0-9]*' |
#workspace2
#notify-send workspaces_string:$workspaces_string

memory() {
    local label="M"
    local memory="$(free | grep Mem | awk '{print $3/$2 * 100.0}')"
    memory=${memory%%.*} # only keep numbers before decimal
    echo "$label$memory"
}

cpu() {
    local label="C"
    local cpu="$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) "%"; }' <(grep 'cpu ' /proc/stat) <(sleep 3;grep 'cpu ' /proc/stat))"
    cpu=${cpu%%.*} # only keep numbers before decimal
    echo "$label$cpu"
}

battery() {
    local label="B"
    local battery=$(acpi --battery| cut -d, -f2 | tr -d '[:space:]' | sed 's/%//')
    #state=$(acpi | awk -v N=3 '{print $N}')
    #remaining=$(acpi | awk -v N=5 '{print $N}')
    #output=$(cat "$BATTERY_LEVEL_FILE")
    echo "$label$battery" #($state $remaining remaining)
}

# alternative to bspc subscribe is: xprop -spy -root _NET_ACTIVE_WINDOW
activewindow() {
    local label="A"
    local len=$(echo -n "$(xdotool getwindowfocus getwindowname)" | wc -m)
    local max_len=70
    if [ "$len" -gt "$max_len" ];then
        local windowname="$(xdotool getwindowfocus getwindowname | cut -c 1-$max_len)..."
    else
        local windowname="$(xdotool getwindowfocus getwindowname)"
    fi
    echo -e "$label$windowname" 
}


wifi() {
    local label="I"
    local WIFISTR=$( iwconfig "$WIFI_CARD" | grep "Link" | sed 's/ //g' | sed 's/LinkQuality=//g' | sed 's/\/.*//g')
    if [ ! -z $WIFISTR ] ; then
        local WIFISTR=$(( ${WIFISTR} * 100 / 70))
        local ESSID=$(iwconfig "$WIFI_CARD" | grep ESSID | sed 's/ //g' | sed 's/.*://' | cut -d "\"" -f 2)
        if [ $WIFISTR -ge 1 ] ; then
            local wifi_name="$ESSID $WIFISTR%%"
        fi
    fi
    echo "$label$wifi_name"
}

volume() {
    local label="V"
    local volume=$(amixer sget Master | awk -F"[][]" '/dB/ { print $2 }' | sed 's/%//')
    echo "$label$volume"
}

start_output_stream() {
    inotifywait -q -m -e modify /tmp/brightness* $LAPTOP_BRIGHTNESS_FILE | while read -r filename event; do
        brightnesses
        sleep 0.1
    done &

    bspc subscribe node_focus desktop_focus | while read; do
        activewindow
    done &

    while true; do
        activewindow 
        sleep 1s
    done &

    bspc subscribe desktop_focus | while read; do
        workspace 
    done &
    
    while true; do
        battery 
        sleep 30s
    done &

    while true; do
        clock 
        sleep 1s
    done &

    pactl subscribe | while read; do
        volume 
    done &

    while true; do
        cal 
        sleep 60s
    done &

    while true; do
        wifi 
        sleep 10s
    done &

    while true; do
        memory 
        sleep 3s
    done &

    while true; do
        cpu # no need to sleep; bulilt in to cpu function
    done &

    wait
}


# MAIN CODE; look here to actually understand program logic!

num_monitors=$(bspc query -M --names | wc -l)
primary_monitor="$MONITOR_PRIMARY"

kill_running_instance

# initialize
brightnesses_string=$(brightnesses | cut -c2-)
activewindow_bar=$(activewindow | cut -c2-)
workspace_string=$(workspace | cut -c2-)
volume_bar=$(volume | cut -c2-)

notify-send "stuff:$workspace_string"

start_output_stream | while read line; do
    unlabeled_line="${line:1}" # cut label from beginning of string
    case "$line" in # assign each output stream output to variable
        T*) clock_bar="$unlabeled_line" ;;
        C*) cpu_bar="$unlabeled_line" ;;
        W*) workspace_string="$unlabeled_line" ;;
        B*) battery_bar="$unlabeled_line" ;;
        A*) activewindow_bar="$unlabeled_line" ;;
        I*) wifi_bar="$unlabeled_line" ;;
        V*) volume_bar="$unlabeled_line" ;;
        D*) date_bar="$unlabeled_line" ;;
        M*) memory_bar="$unlabeled_line" ;;
        R*) brightness_bar="$unlabeled_line" ;;
        S*) brightnesses_string="$unlabeled_line" ;;
    esac

    formatted_string=""
    monitor_display_counter=0
    while [ $monitor_display_counter -lt $num_monitors ]; do
        formatted_string+="%{lS$monitor_display_counter} "$(get_element_by_index "$workspace_string" "$monitor_display_counter")" %{-lc+uU#bdbcb1}$activewindow_bar%{-u} %{r+uU#000000}Brightness: $(get_element_by_index "$brightnesses_string" $monitor_display_counter)%{-u} %{+uU#03851d}Memory: $memory_bar%{-u} %{+uU#f90000}CPU: $cpu_bar%{-u} %{+uU#9f78e1}$wifi_bar%{-u} %{+uU#0aeaf2}Volume: $volume_bar%{-u} %{+uU#0a6cf5}$date_bar%{-u} %{+uU#fc8d05}$clock_bar%{-u} %{+uU#ffb52a}Battery: $battery_bar%{-uU}"
        ((monitor_display_counter++))
    done
    echo -e "$formatted_string"
done | lemonbar -p -f  "Inconsolata:size=12" -u 2 #-B "#000000" -g x30 #-o -3 #-u -3 # finally, display the string


