#!/bin/bash

# kill running instance of lemonbar and bspwm_lemonbar, launch lemonbar with modules
pgrep -x lemonbar > /dev/null && pkill -x lemonbar
script_name=${BASH_SOURCE[0]}
for pid in $(pidof -x $script_name); do
    if [ $pid != $$ ]; then
        kill -9 $pid
    fi 
done

# get monitors and save to monitors array
primary_monitor="$MONITOR_PRIMARY"
monitors=()
external_monitor_brightness_files_string=""
while read monitor; do
    monitors+=( "$monitor" )
    if [ "$monitor" != "$primary_monitor" ]; then
         external_monitor_brightness_files_string=" /tmp/brightness_$monitor $external_monitor_brightness_files_string"; fi
done < <(bspc query -M --names)
notify-send "$monitors"

get_element_by_index () {
    string="$1"
    index=$(("$2"+1))
    echo $string | cut -d " " -f "$index"
}

brightnesses() {
    brightnesses=""
    for monitor in $monitors; do
        if [ $monitor == $primary_monitor ]; then
            brightness="$(cat $LAPTOP_BRIGHTNESS_FILE)"
            brightness="$(echo $brightness / 120000*100 | bc -l)"
            brightness=${brightness%%.*} # only keep numbers before decimal
            brightnesses="$brightnesses $brightness "
        else
            brightness="$(cat /tmp/brightness_$monitor)"
            brightness="$(echo $brightness / 10*100 | bc -l)"
            brightness=${brightness%%.*} # only keep numbers before decimal
            brightnesses="$brightnesses $brightness "
        fi
    done
    echo "S$brightnesses"
}

clock() {
    clock=$(date "+%I:%M")
    echo "T$clock"
}

cal() {
    caldate=$(date "+%a, %d %B %Y")
    echo "D$caldate"
}

workspace() {
    workspace=$(workspace_module)
    echo "W$workspace"
}

memory() {
    memory="$(free | grep Mem | awk '{print $3/$2 * 100.0}')"
    memory=${memory%%.*} # only keep numbers before decimal
    echo "MMemory: $memory%%"
}

cpu() {
    cpu="$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) "%"; }' <(grep 'cpu ' /proc/stat) <(sleep 3;grep 'cpu ' /proc/stat))"
    cpu=${cpu%%.*} # only keep numbers before decimal
    echo "CCPU: $cpu%%"
}

battery() {
    #BATTACPI=$()
    output=$(acpi --battery| cut -d, -f2 | tr -d '[:space:]' | sed 's/%//')
    #state=$(acpi | awk -v N=3 '{print $N}')
    #remaining=$(acpi | awk -v N=5 '{print $N}')
    #output=$(cat "$BATTERY_LEVEL_FILE")
    echo "BBattery: $output%%" #($state $remaining remaining)
}

# alternative to bspc subscribe is: xprop -spy -root _NET_ACTIVE_WINDOW
activewindow() {
    len=$(echo -n "$(xdotool getwindowfocus getwindowname)" | wc -m)
    max_len=70
    if [ "$len" -gt "$max_len" ];then
        windowname="$(xdotool getwindowfocus getwindowname | cut -c 1-$max_len)..."
    else
        windowname="$(xdotool getwindowfocus getwindowname)"
    fi
    echo -e "A$windowname" 
}


wifi() {
    WIFISTR=$( iwconfig "$WIFI_CARD" | grep "Link" | sed 's/ //g' | sed 's/LinkQuality=//g' | sed 's/\/.*//g')
    if [ ! -z $WIFISTR ] ; then
        WIFISTR=$(( ${WIFISTR} * 100 / 70))
        ESSID=$(iwconfig "$WIFI_CARD" | grep ESSID | sed 's/ //g' | sed 's/.*://' | cut -d "\"" -f 2)
        if [ $WIFISTR -ge 1 ] ; then
            wifi_name="$ESSID $WIFISTR%%"
        fi
    fi
    echo "I$wifi_name"
}

volume() {
    volume=$(amixer sget Master | awk -F"[][]" '/dB/ { print $2 }' | sed 's/%//')
    echo "VVolume: $volume%%"
}

brightness() {
    curbrightness="$(cat /sys/class/backlight/intel_backlight/brightness)"
    max_brightness="$(cat /sys/class/backlight/intel_backlight/max_brightness)"
    brightness="$(echo $curbrightness / $max_brightness*100 | bc -l)"
    brightness_truncated=${brightness%%.*} # only keep numbers before decimal
    echo "RBrightness: $brightness_truncated%%"
}

initialize() {
    # set initial values manually
    brightness=$(brightness | cut -c2-)
    activewindow=$(activewindow | cut -c2-)
    #activewindow_poll=$(activewindow_poll | cut -c2-)
    workspace=$(workspace | cut -c2-)
    #battery="$(battery | cut -c2-)"
    #clock=$(clock | cut -c2-)
    volume=$(volume | cut -c2-)
    #cal=$(cal | cut -c2-)
    #wifi=$(wifi | cut -c2-)
    #memory=$(memory | cut -c2-)
    #cpu=$(cpu | cut -c2-)
}

output_stream() {
    #while true; do
        #brightnesses
        #sleep 1s
    #done &

    inotifywait -q -m -e modify "$LAPTOP_BRIGHTNESS_FILE" | while read -r filename event; do
        brightnesses
    done &
#
    inotifywait -q -m -e modify "$external_monitor_brightness_files_string" | while read -r filename event; do
        brightness 
    done &

    bspc subscribe node_focus desktop_focus | while read; do
        activewindow
    done &

    while true; do
        activewindow 
        sleep 1s
    done &

    bspc subscribe desktop_focus | while read; do
        workspace 
    done &
    
    while true; do
        battery 
        sleep 30s
    done &

    while true; do
        clock 
        sleep 1s
    done &

    pactl subscribe | while read; do
        volume 
    done &

    while true; do
        cal 
        sleep 60s
    done &

    while true; do
        wifi 
        sleep 10s
    done &

    while true; do
        memory 
        sleep 3s
    done &

    while true; do
        cpu 
    done &

    wait
}

assign_incoming_variable() {
    case $line in 
        T*) clock="${line:1}" ;;
        C*) cpu="${line:1}" ;;
        W*) workspace="${line:1}" ;;
        B*) battery="${line:1}" ;;
        A*) activewindow="${line:1}" ;;
        I*) wifi="${line:1}" ;;
        V*) volume="${line:1}" ;;
        D*) date="${line:1}" ;;
        M*) memory="${line:1}" ;;
        R*) brightness="${line:1}" ;;
        S*) brightnesses="${line:1}" ;;
    esac
}

format_string_for_bar() {
	echo -e "%{S0}$workspace %{c+uU#bdbcb1}$activewindow%{-u} %{r+uU#000000}$brightness%{-u} %{+uU#03851d}$memory%{-u} %{+uU#f90000}$cpu%{-u} %{+uU#9f78e1}$wifi%{-u} %{+uU#0aeaf2}$volume%{-u} %{+uU#0a6cf5}$date%{-u} %{+uU#fc8d05}$clock%{-u} %{+uU#ffb52a}$battery%{-u}" 
}


format_string_for_bar_multi_monitor() {
    formatted_string=""
    counter=0
    for iterate in $monitors; do
        formatted_string="$formatted_string %{S$counter}$workspace %{c+uU#bdbcb1}$activewindow%{-u} %{r+uU#000000}Brightness: $(get_element_by_index $brightnesses $counter)%%%{-u} %{+uU#03851d}$memory%{-u} %{+uU#f90000}$cpu%{-u} %{+uU#9f78e1}$wifi%{-u} %{+uU#0aeaf2}$volume%{-u} %{+uU#0a6cf5}$date%{-u} %{+uU#fc8d05}$clock%{-u} %{+uU#ffb52a}$battery%{-u} "
        ((counter++))
    done
    echo -e "$formatted_string"
}

format_string_for_bar_multi_monitor2() {
    formatted_string=""
    counter=0
    while [ $counter -lt 2 ]; do
        formatted_string="$formatted_string%{S$counter}$workspace %{c+uU#bdbcb1}$activewindow%{-u} %{r+uU#000000}Brightness: $(get_element_by_index $brightnesses $counter)%%%{-u} %{+uU#03851d}$memory%{-u} %{+uU#f90000}$cpu%{-u} %{+uU#9f78e1}$wifi%{-u} %{+uU#0aeaf2}$volume%{-u} %{+uU#0a6cf5}$date%{-u} %{+uU#fc8d05}$clock%{-u} %{+uU#ffb52a}$battery%{-u} "
        ((counter++))
    done
    echo -e "$formatted_string"
}

initialize

output_stream | while read line; do
    assign_incoming_variable
    format_string_for_bar_multi_monitor2
done | lemonbar -p -f  "Inconsolata:size=12" -u 2 #-B "#000000" -g x30 #-o -3 #-u -3


#two_monitors=false
#if [ "$(xrandr | grep -w connected | wc -l)" -eq "2" ]
#then
    #two_monitors=true
#fi
    #if [ $two_monitors ] 
    #then 
        #echo -e "%{S1}%{l}$workspace" "%{c}$activewindow" "%{r}  $memory $cpu $wifi  $volume  $date $clock $battery"
    #fi
